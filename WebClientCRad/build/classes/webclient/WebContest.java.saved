package webclient;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.util.Arrays;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.JFreeChart;
import org.jfree.data.time.Minute;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.xy.XYDataset;
import org.jfree.ui.ApplicationFrame;
import org.jfree.ui.RefineryUtilities;

public class WebContest {

    public static void main(String[] args) {
        WebContest app = new WebContest();
        app.retrieveSolar ();
    }

    private final TimeSeriesCollection xyDataset = new TimeSeriesCollection();

    public class TimeSeries_AWT extends ApplicationFrame {

    public TimeSeries_AWT ( String title ) {
        super( title );
        JFreeChart chart = ChartFactory.createTimeSeriesChart(title, "Time","Lux, Volts*100", (XYDataset) xyDataset);
        final ChartPanel chartPanel = new ChartPanel( chart );
        chartPanel.setPreferredSize( new java.awt.Dimension( 560 , 370 ) );
        setContentPane( chartPanel );
        }
    }

    void retrieveSolar () {
        int samples = 10;
        String[] datalines = new String[samples];
        try {
            URL iurl = new URL("https://api.pripoj.me/message/get/0004A30B00195511?token=Y7J3MvLLMrXCtzpiQuPgHHu7wO046Jx6&limit="+String.valueOf(samples));
            InputStream is = iurl.openStream();
            ByteArrayOutputStream out = new ByteArrayOutputStream();
            byte[] buffer = new byte[1024];
            while (true) {
                int r = is.read(buffer);
                if (r == -1) break;
                out.write(buffer, 0, r);
            }
            byte[] jsonData = out.toByteArray();
            double osvit, batt;
            // Jackson
            ObjectMapper objectMapper = new ObjectMapper();
            JsonNode rootNode = objectMapper.readTree(jsonData);
            JsonNode metaNode  = rootNode.path("_meta");
            JsonNode statNode  = metaNode.path("status");
            System.out.println("Status  = "+statNode.asText());
            if (statNode.asText().equals ("SUCCESS")) {
                System.out.println("Poƒçet = "+metaNode.path("count").asText());
                JsonNode recoNode = rootNode.path("records");
		if (recoNode.isArray()) {
                    int i=0;
                    for (JsonNode node : recoNode) {
                        String times   = node.path("createdAt").asText();
                        String payload = node.path("payloadHex").asText();
                        if (payload.length()==8){
                            if (payload.substring(0,2).equals("55")) {
                                osvit = (double) Integer.parseInt(payload.substring(2,5));
                                batt  = (double) Integer.parseInt(payload.substring(5,8));
                                osvit = Math.pow (1.009960258, osvit);
                                batt  = (batt-100)*2*5.07/899;
                                times = times+","+String.valueOf(osvit)+","+String.valueOf(batt);
                                datalines[i] = times;
                                i++;
                            }
                        }
                    }
                    Arrays.sort(datalines);
                    final TimeSeries s1 = new TimeSeries("Osvit");
                    final TimeSeries s2 = new TimeSeries("Baterie");
                    for (String dataline:datalines){
                        String[] dd = dataline.split(",");
                        Integer YY = Integer.parseInt (dd[0].substring(0,4));
                        Integer MM = Integer.parseInt (dd[0].substring(5,7));
                        Integer DD = Integer.parseInt (dd[0].substring(8,10));
                        Integer hh = Integer.parseInt (dd[0].substring(11,13));
                        Integer mm = Integer.parseInt (dd[0].substring(14,16));
                        s1.addOrUpdate(new Minute(hh,mm,DD,MM,YY), Double.parseDouble(dd[1]));
                        s2.addOrUpdate(new Minute(hh,mm,DD,MM,YY), 100*Double.parseDouble(dd[2]));
                    }
                    xyDataset.addSeries(s1);
                    xyDataset.addSeries(s2);
                    TimeSeries_AWT chart = new TimeSeries_AWT ("IoT Contest");
                    chart.pack( );
                    RefineryUtilities.centerFrameOnScreen( chart );
                    chart.setVisible( true );
                }
            }
        } catch (IOException | NumberFormatException e) {
            System.out.println (e.getMessage());
        }
    }
}
